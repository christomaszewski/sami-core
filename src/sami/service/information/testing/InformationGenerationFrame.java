package sami.service.information.testing;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import sami.event.GeneratedEventListenerInt;
import sami.event.GeneratedInputEventSubscription;
import sami.event.InputEvent;
import sami.service.information.InformationServer;
import sami.service.information.InformationServiceProviderInt;

/**
 *
 * @author pscerri
 */
public class InformationGenerationFrame extends javax.swing.JFrame implements InformationServiceProviderInt {

    private static final Logger LOGGER = Logger.getLogger(InformationGenerationFrame.class.getName());
    DefaultListModel lModel = new DefaultListModel();
    ArrayList<GeneratedEventListenerInt> listeners = new ArrayList<GeneratedEventListenerInt>();
    HashMap<GeneratedEventListenerInt, Integer> listenerGCCount = new HashMap<GeneratedEventListenerInt, Integer>();

    /**
     * Creates new form InformationGenerationFrame
     */
    public InformationGenerationFrame() {
        initComponents();
        InformationServer.addServiceProvider(this);
        subList.setCellRenderer(new IESRenderer());
        subList.setModel(lModel);
    }

    @Override
    public boolean offer(GeneratedInputEventSubscription sub) {
        LOGGER.log(Level.FINE, "InformationGenerationFrame offered subscription: " + sub);
        LOGGER.log(Level.FINE, "\tInformationGenerationFrame took subscription request: " + sub);
        lModel.add(0, sub);
        if (!listeners.contains(sub.getListener())) {
            LOGGER.log(Level.FINE, "\t\tInformationGenerationFrame adding listener: " + sub.getListener());
            listeners.add(sub.getListener());
            listenerGCCount.put(sub.getListener(), 1);
        } else {
            LOGGER.log(Level.FINE, "\t\tInformationGenerationFrame incrementing listener: " + sub.getListener());
            listenerGCCount.put(sub.getListener(), listenerGCCount.get(sub.getListener()) + 1);
        }
        return true;
    }

    @Override
    public boolean cancel(GeneratedInputEventSubscription sub) {
        LOGGER.log(Level.FINE, "InformationGenerationFrame asked to cancel subscription: " + sub);
        if (listeners.contains(sub.getListener())) {
            LOGGER.log(Level.FINE, "InformationGenerationFrame  canceling subscription: " + sub);
            if (listenerGCCount.get(sub.getListener()) == 1) {
                // Remove listener
                LOGGER.log(Level.FINE, "\tInformationGenerationFrame removing listener: " + sub.getListener());
                listeners.remove(sub.getListener());
                listenerGCCount.remove(sub.getListener());
            } else {
                // Decrement garbage colleciton count
                LOGGER.log(Level.FINE, "\t\tInformationGenerationFrame decrementing listener: " + sub.getListener());
                listenerGCCount.put(sub.getListener(), listenerGCCount.get(sub.getListener()) - 1);
            }
            return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        subList = new javax.swing.JList();
        generateB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Information Generation");

        jScrollPane1.setViewportView(subList);

        generateB.setText("Generate");
        generateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(generateB)
                        .add(0, 282, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(generateB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBActionPerformed
        GeneratedInputEventSubscription sub = (GeneratedInputEventSubscription) subList.getSelectedValue();
        InputEvent paramEvent = sub.getParamEvent();
//        paramEvent.setReleventProxy(ProxyServer.getFirstProxy());
        paramEvent.setRelevantProxyList(null);
        try {
            InputEvent generatorEvent = paramEvent.getClass().newInstance();
            paramEvent.setGeneratorEvent(generatorEvent);
            sub.getListener().eventGenerated(generatorEvent);
        } catch (IllegalAccessException iae) {
        } catch (InstantiationException ie) {
        }
    }//GEN-LAST:event_generateBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformationGenerationFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList subList;
    // End of variables declaration//GEN-END:variables

    private class IESRenderer implements ListCellRenderer {

        Hashtable<GeneratedInputEventSubscription, IESComp> comps = new Hashtable<GeneratedInputEventSubscription, IESComp>();

        @Override
        public Component getListCellRendererComponent(JList jlist, Object o, int i, boolean isSelected, boolean hasFocus) {
            IESComp comp = comps.get((GeneratedInputEventSubscription) o);
            if (comp == null) {
                comp = new IESComp((GeneratedInputEventSubscription) o);
                comps.put((GeneratedInputEventSubscription) o, comp);
            }
            if (isSelected) {
                comp.setBackground(Color.yellow);
            } else {
                comp.setBackground(Color.white);
            }

            return comp;
        }
    }

    private class IESComp extends JPanel {

        private final GeneratedInputEventSubscription sub;

        public IESComp(final GeneratedInputEventSubscription sub) {
            this.sub = sub;
            add(new JLabel(sub.getParamEvent().toString()));
        }
    }
}
